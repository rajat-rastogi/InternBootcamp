//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace microsoft { namespace Sample { namespace AllJoynCar {

// Methods
public ref class AllJoynCarDriveCalledEventArgs sealed
{
public:
    AllJoynCarDriveCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool interfaceMemberOnOff, _In_ uint32 interfaceMemberDirection);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AllJoynCarDriveResult^ Result
    {
        AllJoynCarDriveResult^ get() { return m_result; }
        void set(_In_ AllJoynCarDriveResult^ value) { m_result = value; }
    }

    property bool OnOff
    {
        bool get() { return m_interfaceMemberOnOff; }
    }

    property uint32 Direction
    {
        uint32 get() { return m_interfaceMemberDirection; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AllJoynCarDriveResult^>^ GetResultAsync(AllJoynCarDriveCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AllJoynCarDriveResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AllJoynCarDriveResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AllJoynCarDriveResult^ m_result;
    bool m_interfaceMemberOnOff;
    uint32 m_interfaceMemberDirection;
};

// Readable Properties
public ref class AllJoynCarGetSpeedRequestedEventArgs sealed
{
public:
    AllJoynCarGetSpeedRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AllJoynCarGetSpeedResult^ Result
    {
        AllJoynCarGetSpeedResult^ get() { return m_result; }
        void set(_In_ AllJoynCarGetSpeedResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AllJoynCarGetSpeedResult^>^ GetResultAsync(AllJoynCarGetSpeedRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AllJoynCarGetSpeedResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AllJoynCarGetSpeedResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AllJoynCarGetSpeedResult^ m_result;
};

public ref class AllJoynCarGetStateRequestedEventArgs sealed
{
public:
    AllJoynCarGetStateRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AllJoynCarGetStateResult^ Result
    {
        AllJoynCarGetStateResult^ get() { return m_result; }
        void set(_In_ AllJoynCarGetStateResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AllJoynCarGetStateResult^>^ GetResultAsync(AllJoynCarGetStateRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AllJoynCarGetStateResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AllJoynCarGetStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AllJoynCarGetStateResult^ m_result;
};

// Writable Properties
public ref class AllJoynCarSetSpeedRequestedEventArgs sealed
{
public:
    AllJoynCarSetSpeedRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property uint32 Value
    {
        uint32 get() { return m_value; }
    }

    property AllJoynCarSetSpeedResult^ Result
    {
        AllJoynCarSetSpeedResult^ get() { return m_result; }
        void set(_In_ AllJoynCarSetSpeedResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<AllJoynCarSetSpeedResult^>^ GetResultAsync(AllJoynCarSetSpeedRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AllJoynCarSetSpeedResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AllJoynCarSetSpeedResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    uint32 m_value;
    AllJoynCarSetSpeedResult^ m_result;
};

} } } } 
